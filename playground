
--# State


-- The Art Of State
 
--=================

State = class()

function State:init()
  self.types="abst"
end

function State:touched(touch)
end

function State:draw()
end

function State:calcAABB()
end

function State:add()
end

--=================
Play = class(State)

function Play:init()
  State:init(self)
  self.types="play"
  physics.resume()
end

function Play:draw()
  State:draw(self)
  debugDraw:draw()
end

function Play:touched(t)
  debugDraw:touched(t)
end

function Play:add(gc)
  State:add(gc)
end


--=================
Line = class(State)

function Line:init()
  State:init(self)
  self.types="line"
  self.v1=vec2()
  self.v2=vec2()
end

function Line:draw()
  State:draw(self)
  
  line(self.v1.x,self.v1.y,self.v2.x,self.v2.y)
end

function Line:touched(t)
  tv=vec2(t.x,t.y)
  if t.state == BEGAN then
    self.v1 = tv
    self.v2 = tv
  elseif t.state== MOVING then
    self.v2 = tv
  elseif t.state==ENDED then
    self:add(gc)
  end
end

function Line:add(gc)
  itm=Item()
  itm.geos={self.v1,self.v2}
  itm.types="line"
  gc:add(itm)
end

--=================
Cycle = class(State)

function Cycle:init()
  State:init(self)
  self.types="cycle"
  self.v1=vec2()
  self.v2=vec2()
end

function Cycle:draw()
  State:draw(self)
  noFill()
  rad=self.v1:dist(self.v2)*2
  ellipse(self.v1.x,self.v1.y,rad,rad)
end

function Cycle:touched(t)
  tv=vec2(t.x,t.y)
  if t.state == BEGAN then
    self.v1 = tv
    self.v2 = tv
  elseif t.state== MOVING then
    self.v2 = tv
  elseif t.state==ENDED then
    self:add(gc)
  end
end

function Cycle:add(gc)
  itm=Item()
  itm.geos={self.v1,self.v2}
  itm.types="cycle"
  gc:add(itm)
end
--=================
Rect = class(State)

function Rect:init()
  State:init(self)
  self.type="rect"
  self.v1=vec2()
  self.v2=vec2()
  self.pos=vec2()
end

function Rect:draw()
  State:draw(self)
  noFill()
  max,min,pos=self:calcAABB()
  width = max.x-min.x
  height = max.y-min.y
  noFill()
  rect(min.x,min.y,width,height)
end

function Rect:touched(t)
  tv=vec2(t.x,t.y)
  if t.state == BEGAN then
    self.v1 = tv
    self.v2 = tv
  elseif t.state== MOVING then
    self.v2 = tv
  elseif t.state==ENDED then
    self.v2= tv
    self:add(gc,"rect")
  end
end

function Rect:calcAABB()
  local min=vec2(math.huge,math.huge)
  local max=vec2(-math.huge,-math.huge)
  local center=vec2(0,0)
  for k,v in ipairs({self.v1,self.v2}) do
    if v.x < min.x then
      min.x = v.x
    end
    if v.y < min.y then
      min.y = v.y
    end
    if v.x > max.x then
      max.x = v.x
    end
    if v.y > max.y then
      max.y = v.y
    end
  end
  center.x = (min.x+max.x)/2
  center.y = (min.y+max.y)/2
  return max,min,center
end

function Rect:add(gc)
  
  max,min,pos=self:calcAABB()
  width = max.x-min.x
  height = max.y-min.y
  local tl = vec2(min.x,min.y+height)
  local br = vec2(max.x,max.y-height)
  
  itm=Item()
  itm.geos={min,tl,max,br}
  itm.types="rect"
  gc:add(itm)

end
--=================

Move = class(State)

function Move:init()
  State:init(self)
  self.type="move"
  self.selectgeo=nil
  self.selindex = -1
  self.currentp=vec2(0,0)
  self.orgin=vec2(0,0)
  self.delta = vec2(0,0)
  
end

function Move:getselect(pos)
  gs = gc.items
  for k,v in ipairs(gs) do
    self:hitvert(v,pos)
  end
end

function Move:draw()
  if self.selectgeo~=nil then
    pp=self.mi+self.delta
    wi=self.ma.x-self.mi.x
    he=self.ma.y-self.mi.y
    noFill()
    rect(pp.x,pp.y,wi,he)
  end
end

function Move:hitvert(item,pos)
  local tv = vec2(pos.x, pos.y)
  local minDist = math.huge

  
  -- if touch is within 50px to a line, insert point on line
  if #(item.geos) >= 2 then
    local minDist = math.huge
    local pv = item.geos[1]
    for k,v in ipairs(item.geos) do
      local dist = distPointToLineSeg(tv, pv, v)
      if dist < minDist and dist < 50 then
        minDist = dist
        self.selectgeo = item
      end
      pv = v
    end
  end
end

function Move:touched(t)
  tv=vec2(t.x,t.y)
  
  if t.state==BEGAN then
    self.startp=tv
    self:getselect(tv)
    if self.selectgeo == nil then
      return
    else
      self.ma,self.mi,self.orgin=self.selectgeo:calcAABB()
    end
  elseif t.state==MOVING then
    self.currentp=tv
    self.delta=self.currentp-self.orgin
  else
    if self.selectgeo ~= nil then
      for k,v in ipairs(self.selectgeo.geos) do
        v.x = v.x+ self.delta.x
        v.y = v.y+ self.delta.y
      end
      self.selectgeo=nil
    end
    
  end
end
--=================
index = -1
Edit = class(State)

function Edit:init()
  State:init(self)
  self.types="edit"
  self.selectgeo=nil
  self.selindex = -1
  self.selectid=-1
end

function Edit:getselect(pos)
  gs = gc.items
  for k,v in ipairs(gs) do
    self:hitvert(v,pos)
  end
end

function Edit:hitvert(item,pos)
  local tv = vec2(pos.x, pos.y)
  local minDist = math.huge

  
  -- if touch is within 50px to a line, insert point on line
  if #(item.geos) >= 2 then
    local minDist = math.huge
    local pv = item.geos[1]
    for k,v in ipairs(item.geos) do
      local dist = distPointToLineSeg(tv, pv, v)
      if dist < minDist and dist < 50 then
        minDist = dist
        self.selectgeo = item
      end
      pv = v
    end
  end
end

-- distPointToLineSeg(): shortest distance of a point to a line segment.
function distPointToLineSeg(p , s1, s2)
  local v = s2 - s1
  local w = p - s1

  c1 = w:dot(v)
  if c1 <= 0 then
    return p:dist(s1)
  end

  c2 = v:dot(v)
  if c2 <= c1 then
    return p:dist(s2)
  end

  b = c1 / c2;
  pb = s1 + b * v;
  return p:dist(pb)
end

function Edit:touched(touch)

  local tv = vec2(touch.x,touch.y)
  
  if touch.state == BEGAN and index == -1 then    
    
    self:getselect(tv)
    
    if self.selectgeo == nil then
      return
    end
    
    -- find the closest vertex within 50 px of thr touch
    touchID = touch.id
    local minDist = math.huge
    for k,v in ipairs(self.selectgeo.geos) do
      local dist = v:dist(tv)
      if dist < minDist and dist < 50 then
        minDist = dist
        index = k
      end
    end
    
    -- if no point is found near the touch, insert a new one 
    if index == -1 then
      index = #(self.selectgeo.geos)
      if index == 0 then
        index = index + 1
      end
      
      -- if touch is within 50px to a line, insert point on line
      if #(self.selectgeo.geos) > 2 then
        local minDist = math.huge
        local pv = self.selectgeo.geos[index]
        for k,v in ipairs(self.selectgeo.geos) do
          local dist = distPointToLineSeg(tv, pv, v)
          if dist < minDist and dist < 50 then
            minDist = dist
            index = k
          end
          pv = v
        end
      end
    
      table.insert(self.selectgeo.geos, index, tv)
    else
      if touch.tapCount==2 then
        if self.selectgeo.types=="rect" then
          table.remove(self.selectgeo.geos,index)
        end
      end
      
    end
    
  elseif touch.state == MOVING and touch.id == touchID then
    self.selectgeo.geos[index] = tv
  elseif touch.state == ENDED and touch.id == touchID then
    index = -1
    insert = true
  end
end
--=================
--# ItemManage
--============
ItemManage = class()

function ItemManage:init()
  self.items = {}
end

function ItemManage:add(item)
  table.insert(self.items,item)
end

function ItemManage:draw()
  for k,v in ipairs(self.items) do
    v:drawIt()
  end
end

function ItemManage:export_str()
-- export physics code
  bdc=""
  for k,v in ipairs(self.items) do
    if v.types=="rect" then
      ma,mi,pos=v:calcAABB()
      sf=""
      for vs,ks in ipairs(v.geos) do
        vv=ks-pos
        s=string.format("vec2(%.2f,%.2f)",vv.x,vv.y)
        sf = sf ..",".. s
      end
      bdn = "body"..k
      bd = "local "..bdn.."=physics.body(POLYGON" .. sf ..")\n"
      bd = bd..bdn..".pos="..string.format("vec2(%.2f,%.2f)",pos.x,pos.y).."\n"
      bd = bd .. "debugDraw:addBody("..bdn..")\n"
      bdc = bdc..bd
    elseif v.types=="cycle" then
      bdn = "cycle"..k
      bd = "local "..bdn .. "=createCircle("..pos.x..","..pos.y..",20)\n"
      bdc = bdc..bd
    end
    
    bdc=bdc.."local joint=physics.joint(REVOLUTE, car, rightWheel, rightWheel.position)"
    
  end
  
  print(bdc)
  pasteboard.copy(bdc)
end

function ItemManage:export()

  for k,v in ipairs(self.items) do
    ma,mi,pos=v:calcAABB()
    if v.types=="rect" then
      pts={}
      for vs,ks in ipairs(v.geos) do
        vv=ks-pos
        pv=vec2(vv.x,vv.y)
        table.insert(pts,pv)
      end
      
      local it = physics.body(POLYGON,unpack(pts))
      it.position = vec2(pos.x,pos.y)
      debugDraw:addBody(it)
    elseif v.types=="line" then
      local edge = physics.body(EDGE, v.geos[1], v.geos[2])
      debugDraw:addBody(edge)
    elseif v.types=="cycle" then
      local dv1= v.geos[1]
      local dv2 = v.geos[2]
      di=dv2:dist(dv1)
      local cy = createCircle(pos.x,pos.y,di)
    end
    
  end
  
end

--============
Item = class()

function Item:init()
  self.geos={}
  self.types=""
end

function Item:drawIt()
  if self.types=="rect" then
    local pv = self.geos[1]
    for k,v in ipairs(self.geos) do
      noStroke()
      ellipse(v.x, v.y, 10, 10)
      strokeWidth(5)
      line(pv.x, pv.y, v.x, v.y)
      pv = v
    end
    if pv then
      line(pv.x, pv.y, self.geos[1].x, self.geos[1].y)
    end
  elseif self.types=="cycle" then
    noFill()
    rad=self.geos[1]:dist(self.geos[2])*2
    ellipse(self.geos[1].x,self.geos[1].y,rad,rad)
    
    line(self.geos[1].x,self.geos[1].y,self.geos[2].x,self.geos[2].y)
  elseif self.types=="line" then
    line(self.geos[1].x,self.geos[1].y,self.geos[2].x,self.geos[2].y)
  end
end

function Item:calcAABB()
  local min=vec2(math.huge,math.huge)
  local max=vec2(-math.huge,-math.huge)
  local center=vec2(0,0)
  for k,v in ipairs(self.geos) do
    if v.x < min.x then
      min.x = v.x
    end
    if v.y < min.y then
      min.y = v.y
    end
    if v.x > max.x then
      max.x = v.x
    end
    if v.y > max.y then
      max.y = v.y
    end
  end
  center.x = (min.x+max.x)/2
  center.y = (min.y+max.y)/2
  return max,min,center
end
--# Main

function phy()
  physics.pause()
end


function createGround()
  local ground = physics.body(POLYGON, vec2(0,20), vec2(0,0), vec2(WIDTH,0), vec2(WIDTH,20))
  ground.type = STATIC
  debugDraw:addBody(ground)
  return ground
end

function createCircle(x,y,r)
  local circle = physics.body(CIRCLE, r)
  -- enable smooth motion
  circle.interpolate = true
  circle.x = x
  circle.y = y
  circle.restitution = 0.25
  circle.sleepingAllowed = false
  debugDraw:addBody(circle)
  return circle
end

-- Use this function to perform your initial setup
function setup()
  print("the art of state!")
  --displayMode(FULLSCREEN)
    
  tb= toolbox()
  tb:addbutton("line")
  tb:addbutton("rect")
  tb:addbutton("vert")
  tb:addbutton("cycle")
  tb:addbutton("move")
  tb:addbutton("export")
  tb:addbutton("play")
  sel=-1
  lastsel=-1
  
  debugDraw = PhysicsDebugDraw()
  
  phy()
  
  gc = ItemManage()
  linest = Line()
  rectst = Rect()
  editst = Edit()
  cycst = Cycle()
  play = Play()
  movest = Move()
  current = linest
end

function touched(touch)
  sel=tb:touched(touch)
  if sel==1 then
    current=linest
    current:init()
    sel=-1
    return
  elseif sel==2 then
    current=rectst
    current:init()
    sel=-1
    return
  elseif sel ==3 then
    current=editst
    current:init()
    sel=-1
    return
  elseif sel ==4 then
    current=cycst
    current:init()
    sel=-1
    return
  elseif sel==5 then
    current=movest
    current:init()
    sel=-1
    return
  elseif sel ==6 then
    gc:export_str()
    current:init()
    sel=-1
    return
  elseif sel==7 then
    debugDraw:clear()
    createGround()
    gc:export()
    current=play
    current:init()
    sel=-1
    return
  end
  
  current:touched(touch)
end

-- This function gets called once every frame
function draw()
  -- This sets a dark background color
  background(40, 40, 50)

  -- This sets the line thickness
  strokeWidth(5)
  
  if current~=play then
    gc:draw()
  end
  
  tb:make()
  
  -- Do your drawing here
  current:draw()
end


--# Physical
PhysicsDebugDraw = class()

function PhysicsDebugDraw:init()
  self.bodies = {}
  self.joints = {}
  self.touchMap = {}
  self.contacts = {}
end

function PhysicsDebugDraw:addBody(body)
  table.insert(self.bodies,body)
end

function PhysicsDebugDraw:addJoint(joint)
  table.insert(self.joints,joint)
end

function PhysicsDebugDraw:clear()
  -- deactivate all bodies
  
  for i,body in ipairs(self.bodies) do
    body:destroy()
  end

  for i,joint in ipairs(self.joints) do
    joint:destroy()
  end
  
  self.bodies = {}
  self.joints = {}
  self.contacts = {}
  self.touchMap = {}
end

function PhysicsDebugDraw:draw()
  
  pushStyle()
  smooth()
  strokeWidth(5)
  stroke(128,0,128)
  
  local gain = 2.0
  local damp = 0.5
  for k,v in pairs(self.touchMap) do
    local worldAnchor = v.body:getWorldPoint(v.anchor)
    local touchPoint = v.tp
    local diff = touchPoint - worldAnchor
    local vel = v.body:getLinearVelocityFromWorldPoint(worldAnchor)
    v.body:applyForce( (1/1) * diff * gain - vel * damp, worldAnchor)
    
    line(touchPoint.x, touchPoint.y, worldAnchor.x, worldAnchor.y)
  end
  
  stroke(0,255,0,255)
  strokeWidth(5)
  for k,joint in pairs(self.joints) do
    local a = joint.anchorA
    local b = joint.anchorB
    line(a.x,a.y,b.x,b.y)
  end
  
  stroke(255,255,255,255)
  noFill()
  
  
  for i,body in ipairs(self.bodies) do
    pushMatrix()
    translate(body.x, body.y)
    rotate(body.angle)
  
    if body.type == STATIC then
      stroke(255,255,255,255)
    elseif body.type == DYNAMIC then
      stroke(150,255,150,255)
    elseif body.type == KINEMATIC then
      stroke(150,150,255,255)
    end
  
    if body.shapeType == POLYGON then
      strokeWidth(3.0)
      local points = body.points
      for j = 1,#points do
        a = points[j]
        b = points[(j % #points)+1]
        line(a.x, a.y, b.x, b.y)
      end
    elseif body.shapeType == CHAIN or body.shapeType == EDGE then
      strokeWidth(3.0)
      local points = body.points
      for j = 1,#points-1 do
        a = points[j]
        b = points[j+1]
        line(a.x, a.y, b.x, b.y)
      end
    elseif body.shapeType == CIRCLE then
      strokeWidth(3.0)
      line(0,0,body.radius-3,0)      
      ellipse(0,0,body.radius*2)
    end
    
    popMatrix()
  end
  
  stroke(255, 0, 0, 255)
  fill(255, 0, 0, 255)

  for k,v in pairs(self.contacts) do
    for m,n in ipairs(v.points) do
      ellipse(n.x, n.y, 10, 10)
    end
  end
  
  popStyle()
end

function PhysicsDebugDraw:touched(touch)
  local touchPoint = vec2(touch.x, touch.y)
  if touch.state == BEGAN then
    for i,body in ipairs(self.bodies) do
      if body.type == DYNAMIC and body:testPoint(touchPoint) then
        self.touchMap[touch.id] = {tp = touchPoint, body = body, anchor = body:getLocalPoint(touchPoint)}
        return true
      end
    end
  elseif touch.state == MOVING and self.touchMap[touch.id] then
    self.touchMap[touch.id].tp = touchPoint
    return true
  elseif touch.state == ENDED and self.touchMap[touch.id] then
    self.touchMap[touch.id] = nil
    return true;
  end
  return false
end

function PhysicsDebugDraw:collide(contact)
  if contact.state == BEGAN then
    self.contacts[contact.id] = contact
    sound(SOUND_HIT, 2643)
  elseif contact.state == MOVING then
    self.contacts[contact.id] = contact
  elseif contact.state == ENDED then
    self.contacts[contact.id] = nil
  end
end

--# Toolbar
Toolbar = class()


toolbox = class()

function toolbox:init()
  self.arrbtn={}
  self.width = 80
  self.selected = -1
end

function toolbox:addbutton(name)
  table.insert(self.arrbtn,name)
end

function toolbox:make()
  for k,v in ipairs(self.arrbtn) do
    g=k-1
    if self.selected == k then
      fill(0, 11, 255, 255)
    else
      fill(255, 0, 35, 255)
    end
    rect(g*self.width,0,self.width,50)
    fill(255, 221, 0, 255)
    textSize(20)
    text(v,g*self.width+self.width/2,25)
  end
  
end

function toolbox:touched(pos)
    for k,v in ipairs(self.arrbtn) do
    g=k-1
    local x= g*self.width
    if pos.x<x+self.width and pos.x>x then
      if pos.y<50 and pos.y>0 then
        self.selected = k
        sel = k
      end
    end
  end
  return sel

end
--# State


-- The Art Of State
  
--=================

State = class()

function State:init()
	self.types="abst"
end

function State:touched(touch)
end

function State:draw()
end

function State:calcAABB()
end

function State:add()
end

--=================
Play = class(State)

function Play:init()
	State:init(self)
	self.types="play"
	physics.resume()
end

function Play:draw()
	State:draw(self)
	debugDraw:draw()
end

function Play:touched(t)
	debugDraw:touched(t)
end

function Play:add(gc)
  State:add(gc)
end


--=================
Line = class(State)

function Line:init()
	State:init(self)
	self.types="line"
	self.v1=vec2()
	self.v2=vec2()
end

function Line:draw()
	State:draw(self)
	
	line(self.v1.x,self.v1.y,self.v2.x,self.v2.y)
end

function Line:touched(t)
	tv=vec2(t.x,t.y)
	if t.state == BEGAN then
		self.v1 = tv
	self.v2 = tv
	elseif t.state== MOVING then
		self.v2 = tv
	elseif t.state==ENDED then
		self:add(gc)
	end
end

function Line:add(gc)
	itm=Item()
	itm.geos={self.v1,self.v2}
	itm.types="line"
	gc:add(itm)
end

--=================
Cycle = class(State)

function Cycle:init()
	State:init(self)
	self.types="cycle"
	self.v1=vec2()
	self.v2=vec2()
end

function Cycle:draw()
	State:draw(self)
	noFill()
	rad=self.v1:dist(self.v2)*2
	ellipse(self.v1.x,self.v1.y,rad,rad)
end

function Cycle:touched(t)
	tv=vec2(t.x,t.y)
	if t.state == BEGAN then
		self.v1 = tv
		self.v2 = tv
	elseif t.state== MOVING then
		self.v2 = tv
	elseif t.state==ENDED then
		self:add(gc)
	end
end

function Cycle:add(gc)
	itm=Item()
	itm.geos={self.v1,self.v2}
	itm.types="cycle"
	gc:add(itm)
end
--=================
Rect = class(State)

function Rect:init()
	State:init(self)
	self.type="rect"
	self.v1=vec2()
	self.v2=vec2()
	self.pos=vec2()
end

function Rect:draw()
	State:draw(self)
	noFill()
	max,min,pos=self:calcAABB()
	width = max.x-min.x
	height = max.y-min.y
	noFill()
	rect(min.x,min.y,width,height)
end

function Rect:touched(t)
	tv=vec2(t.x,t.y)
	if t.state == BEGAN then
		self.v1 = tv
		self.v2 = tv
	elseif t.state== MOVING then
		self.v2 = tv
	elseif t.state==ENDED then
		self.v2= tv
    self:add(gc,"rect")
  end
end

function Rect:calcAABB()
  local min=vec2(math.huge,math.huge)
  local max=vec2(-math.huge,-math.huge)
  local center=vec2(0,0)
  for k,v in ipairs({self.v1,self.v2}) do
    if v.x < min.x then
      min.x = v.x
    end
    if v.y < min.y then
      min.y = v.y
    end
    if v.x > max.x then
      max.x = v.x
    end
    if v.y > max.y then
      max.y = v.y
    end
  end
  center.x = (min.x+max.x)/2
  center.y = (min.y+max.y)/2
  return max,min,center
end

function Rect:add(gc)
  
  max,min,pos=self:calcAABB()
  width = max.x-min.x
  height = max.y-min.y
  local tl = vec2(min.x,min.y+height)
  local br = vec2(max.x,max.y-height)
  
  itm=Item()
  itm.geos={min,tl,max,br}
  itm.types="rect"
  gc:add(itm)

end
--=================

Move = class(State)

function Move:init()
  State:init(self)
  self.type="move"
  self.selectgeo=nil
  self.selindex = -1
  self.currentp=vec2(0,0)
  self.orgin=vec2(0,0)
  self.delta = vec2(0,0)
  
end

function Move:getselect(pos)
  gs = gc.items
  for k,v in ipairs(gs) do
    self:hitvert(v,pos)
  end
end

function Move:draw()
  if self.selectgeo~=nil then
    pp=self.mi+self.delta
    wi=self.ma.x-self.mi.x
    he=self.ma.y-self.mi.y
    noFill()
    rect(pp.x,pp.y,wi,he)
  end
end

function Move:hitvert(item,pos)
  local tv = vec2(pos.x, pos.y)
  local minDist = math.huge

  
  -- if touch is within 50px to a line, insert point on line
  if #(item.geos) >= 2 then
    local minDist = math.huge
    local pv = item.geos[1]
    for k,v in ipairs(item.geos) do
      local dist = distPointToLineSeg(tv, pv, v)
      if dist < minDist and dist < 50 then
        minDist = dist
        self.selectgeo = item
      end
      pv = v
    end
  end
end

function Move:touched(t)
  tv=vec2(t.x,t.y)
  
  if t.state==BEGAN then
    self.startp=tv
    self:getselect(tv)
    if self.selectgeo == nil then
      return
    else
      self.ma,self.mi,self.orgin=self.selectgeo:calcAABB()
    end
  elseif t.state==MOVING then
    self.currentp=tv
    self.delta=self.currentp-self.orgin
  else
    if self.selectgeo ~= nil then
      for k,v in ipairs(self.selectgeo.geos) do
        v.x = v.x+ self.delta.x
        v.y = v.y+ self.delta.y
      end
      self.selectgeo=nil
    end
    
  end
end
--=================
index = -1
Edit = class(State)

function Edit:init()
  State:init(self)
  self.types="edit"
  self.selectgeo=nil
  self.selindex = -1
  self.selectid=-1
end

function Edit:getselect(pos)
  gs = gc.items
  for k,v in ipairs(gs) do
    self:hitvert(v,pos)
  end
end

function Edit:hitvert(item,pos)
  local tv = vec2(pos.x, pos.y)
  local minDist = math.huge

  
  -- if touch is within 50px to a line, insert point on line
  if #(item.geos) >= 2 then
    local minDist = math.huge
    local pv = item.geos[1]
    for k,v in ipairs(item.geos) do
      local dist = distPointToLineSeg(tv, pv, v)
      if dist < minDist and dist < 50 then
        minDist = dist
        self.selectgeo = item
      end
      pv = v
    end
  end
end

-- distPointToLineSeg(): shortest distance of a point to a line segment.
function distPointToLineSeg(p , s1, s2)
  local v = s2 - s1
  local w = p - s1

  c1 = w:dot(v)
  if c1 <= 0 then
    return p:dist(s1)
  end

  c2 = v:dot(v)
  if c2 <= c1 then
    return p:dist(s2)
  end

  b = c1 / c2;
  pb = s1 + b * v;
  return p:dist(pb)
end

function Edit:touched(touch)

  local tv = vec2(touch.x,touch.y)
  
  if touch.state == BEGAN and index == -1 then    
    
    self:getselect(tv)
    
    if self.selectgeo == nil then
      return
    end
    
    -- find the closest vertex within 50 px of thr touch
    touchID = touch.id
    local minDist = math.huge
    for k,v in ipairs(self.selectgeo.geos) do
      local dist = v:dist(tv)
      if dist < minDist and dist < 50 then
        minDist = dist
        index = k
      end
    end
    
    -- if no point is found near the touch, insert a new one    
    if index == -1 then
      index = #(self.selectgeo.geos)
      if index == 0 then
        index = index + 1
      end
      
      -- if touch is within 50px to a line, insert point on line
      if #(self.selectgeo.geos) > 2 then
        local minDist = math.huge
        local pv = self.selectgeo.geos[index]
        for k,v in ipairs(self.selectgeo.geos) do
          local dist = distPointToLineSeg(tv, pv, v)
          if dist < minDist and dist < 50 then
            minDist = dist
            index = k
          end
          pv = v
        end
      end
    
      table.insert(self.selectgeo.geos, index, tv)
    else
      if touch.tapCount==2 then
        if self.selectgeo.types=="rect" then
          table.remove(self.selectgeo.geos,index)
        end
      end
      
    end
    
  elseif touch.state == MOVING and touch.id == touchID then
    self.selectgeo.geos[index] = tv
  elseif touch.state == ENDED and touch.id == touchID then
    index = -1
    insert = true
  end
end
--=================
--# ItemManage
--============
ItemManage = class()

function ItemManage:init()
  self.items = {}
end

function ItemManage:add(item)
  table.insert(self.items,item)
end

function ItemManage:draw()
  for k,v in ipairs(self.items) do
    v:drawIt()
  end
end

function ItemManage:export_str()
-- export physics code
  bdc=""
  for k,v in ipairs(self.items) do
    if v.types=="rect" then
      ma,mi,pos=v:calcAABB()
      sf=""
      for vs,ks in ipairs(v.geos) do
        vv=ks-pos
        s=string.format("vec2(%.2f,%.2f)",vv.x,vv.y)
        sf = sf ..",".. s
      end
      bdn = "body"..k
      bd = "local "..bdn.."=physics.body(POLYGON" .. sf ..")\n"
      bd = bd..bdn..".pos="..string.format("vec2(%.2f,%.2f)",pos.x,pos.y).."\n"
      bd = bd .. "debugDraw:addBody("..bdn..")\n"
      bdc = bdc..bd
    elseif v.types=="cycle" then
      bdn = "cycle"..k
      bd = "local "..bdn .. "=createCircle("..pos.x..","..pos.y..",20)\n"
      bdc = bdc..bd
    end
    
    bdc=bdc.."local joint=physics.joint(REVOLUTE, car, rightWheel, rightWheel.position)"
    
  end
  
  print(bdc)
  pasteboard.copy(bdc)
end

function ItemManage:export()

  for k,v in ipairs(self.items) do
    ma,mi,pos=v:calcAABB()
    if v.types=="rect" then
      pts={}
      for vs,ks in ipairs(v.geos) do
        vv=ks-pos
        pv=vec2(vv.x,vv.y)
        table.insert(pts,pv)
      end
      
      local it = physics.body(POLYGON,unpack(pts))
      it.position = vec2(pos.x,pos.y)
      debugDraw:addBody(it)
    elseif v.types=="line" then
      local edge = physics.body(EDGE, v.geos[1], v.geos[2])
      debugDraw:addBody(edge)
    elseif v.types=="cycle" then
      local dv1= v.geos[1]
      local dv2 = v.geos[2]
      di=dv2:dist(dv1)
      local cy = createCircle(pos.x,pos.y,di)
    end
    
  end
  
end

--============
Item = class()

function Item:init()
  self.geos={}
  self.types=""
end

function Item:drawIt()
  if self.types=="rect" then
    local pv = self.geos[1]
    for k,v in ipairs(self.geos) do
      noStroke()
      ellipse(v.x, v.y, 10, 10)
      strokeWidth(5)
      line(pv.x, pv.y, v.x, v.y)
      pv = v
    end
    if pv then
      line(pv.x, pv.y, self.geos[1].x, self.geos[1].y)
    end
  elseif self.types=="cycle" then
    noFill()
    rad=self.geos[1]:dist(self.geos[2])*2
    ellipse(self.geos[1].x,self.geos[1].y,rad,rad)
    
    line(self.geos[1].x,self.geos[1].y,self.geos[2].x,self.geos[2].y)
  elseif self.types=="line" then
    line(self.geos[1].x,self.geos[1].y,self.geos[2].x,self.geos[2].y)
  end
end

function Item:calcAABB()
  local min=vec2(math.huge,math.huge)
  local max=vec2(-math.huge,-math.huge)
  local center=vec2(0,0)
  for k,v in ipairs(self.geos) do
    if v.x < min.x then
      min.x = v.x
    end
    if v.y < min.y then
      min.y = v.y
    end
    if v.x > max.x then
      max.x = v.x
    end
    if v.y > max.y then
      max.y = v.y
    end
  end
  center.x = (min.x+max.x)/2
  center.y = (min.y+max.y)/2
  return max,min,center
end
--# Main

function phy()
  physics.pause()
end


function createGround()
  local ground = physics.body(POLYGON, vec2(0,20), vec2(0,0), vec2(WIDTH,0), vec2(WIDTH,20))
  ground.type = STATIC
  debugDraw:addBody(ground)
  return ground
end

function createCircle(x,y,r)
  local circle = physics.body(CIRCLE, r)
  -- enable smooth motion
  circle.interpolate = true
  circle.x = x
  circle.y = y
  circle.restitution = 0.25
  circle.sleepingAllowed = false
  debugDraw:addBody(circle)
  return circle
end

-- Use this function to perform your initial setup
function setup()
  print("the art of state!")
  --displayMode(FULLSCREEN)
    
  tb= toolbox()
  tb:addbutton("line")
  tb:addbutton("rect")
  tb:addbutton("vert")
  tb:addbutton("cycle")
  tb:addbutton("move")
  tb:addbutton("export")
  tb:addbutton("play")
  sel=-1
  lastsel=-1
  
  debugDraw = PhysicsDebugDraw()
  
  phy()
  
  gc = ItemManage()
  linest = Line()
  rectst = Rect()
  editst = Edit()
  cycst = Cycle()
  play = Play()
  movest = Move()
  current = linest
end

function touched(touch)
  sel=tb:touched(touch)
  if sel==1 then
    current=linest
    current:init()
    sel=-1
    return
  elseif sel==2 then
    current=rectst
    current:init()
    sel=-1
    return
  elseif sel ==3 then
    current=editst
    current:init()
    sel=-1
    return
  elseif sel ==4 then
    current=cycst
    current:init()
    sel=-1
    return
  elseif sel==5 then
    current=movest
    current:init()
    sel=-1
    return
  elseif sel ==6 then
    gc:export_str()
    current:init()
    sel=-1
    return
  elseif sel==7 then
    debugDraw:clear()
    createGround()
    gc:export()
    current=play
    current:init()
    sel=-1
    return
  end
  
  current:touched(touch)
end

-- This function gets called once every frame
function draw()
  -- This sets a dark background color
  background(40, 40, 50)

  -- This sets the line thickness
  strokeWidth(5)
  
  if current~=play then
    gc:draw()
  end
  
  tb:make()
  
  -- Do your drawing here
  current:draw()
end


--# Physical
PhysicsDebugDraw = class()

function PhysicsDebugDraw:init()
  self.bodies = {}
  self.joints = {}
  self.touchMap = {}
  self.contacts = {}
end

function PhysicsDebugDraw:addBody(body)
  table.insert(self.bodies,body)
end

function PhysicsDebugDraw:addJoint(joint)
  table.insert(self.joints,joint)
end

function PhysicsDebugDraw:clear()
  -- deactivate all bodies
  
  for i,body in ipairs(self.bodies) do
    body:destroy()
  end

  for i,joint in ipairs(self.joints) do
    joint:destroy()
  end  
  
  self.bodies = {}
  self.joints = {}
  self.contacts = {}
  self.touchMap = {}
end

function PhysicsDebugDraw:draw()
  
  pushStyle()
  smooth()
  strokeWidth(5)
  stroke(128,0,128)
  
  local gain = 2.0
  local damp = 0.5
  for k,v in pairs(self.touchMap) do
    local worldAnchor = v.body:getWorldPoint(v.anchor)
    local touchPoint = v.tp
    local diff = touchPoint - worldAnchor
    local vel = v.body:getLinearVelocityFromWorldPoint(worldAnchor)
    v.body:applyForce( (1/1) * diff * gain - vel * damp, worldAnchor)
    
    line(touchPoint.x, touchPoint.y, worldAnchor.x, worldAnchor.y)
  end
  
  stroke(0,255,0,255)
  strokeWidth(5)
  for k,joint in pairs(self.joints) do
    local a = joint.anchorA
    local b = joint.anchorB
    line(a.x,a.y,b.x,b.y)
  end
  
  stroke(255,255,255,255)
  noFill()
  
  
  for i,body in ipairs(self.bodies) do
    pushMatrix()
    translate(body.x, body.y)
    rotate(body.angle)
  
    if body.type == STATIC then
      stroke(255,255,255,255)
    elseif body.type == DYNAMIC then
      stroke(150,255,150,255)
    elseif body.type == KINEMATIC then
      stroke(150,150,255,255)
    end
  
    if body.shapeType == POLYGON then
      strokeWidth(3.0)
      local points = body.points
      for j = 1,#points do
        a = points[j]
        b = points[(j % #points)+1]
        line(a.x, a.y, b.x, b.y)
      end
    elseif body.shapeType == CHAIN or body.shapeType == EDGE then
      strokeWidth(3.0)
      local points = body.points
      for j = 1,#points-1 do
        a = points[j]
        b = points[j+1]
        line(a.x, a.y, b.x, b.y)
      end  
    elseif body.shapeType == CIRCLE then
      strokeWidth(3.0)
      line(0,0,body.radius-3,0)      
      ellipse(0,0,body.radius*2)
    end
    
    popMatrix()
  end
  
  stroke(255, 0, 0, 255)
  fill(255, 0, 0, 255)

  for k,v in pairs(self.contacts) do
    for m,n in ipairs(v.points) do
      ellipse(n.x, n.y, 10, 10)
    end
  end
  
  popStyle()
end

function PhysicsDebugDraw:touched(touch)
  local touchPoint = vec2(touch.x, touch.y)
  if touch.state == BEGAN then
    for i,body in ipairs(self.bodies) do
      if body.type == DYNAMIC and body:testPoint(touchPoint) then
        self.touchMap[touch.id] = {tp = touchPoint, body = body, anchor = body:getLocalPoint(touchPoint)}
        return true
      end
    end
  elseif touch.state == MOVING and self.touchMap[touch.id] then
    self.touchMap[touch.id].tp = touchPoint
    return true
  elseif touch.state == ENDED and self.touchMap[touch.id] then
    self.touchMap[touch.id] = nil
    return true;
  end
  return false
end

function PhysicsDebugDraw:collide(contact)
  if contact.state == BEGAN then
    self.contacts[contact.id] = contact
    sound(SOUND_HIT, 2643)
  elseif contact.state == MOVING then
    self.contacts[contact.id] = contact
  elseif contact.state == ENDED then
    self.contacts[contact.id] = nil
  end
end

--# Toolbar
Toolbar = class()


toolbox = class()

function toolbox:init()
  self.arrbtn={}
  self.width = 80
  self.selected = -1
end

function toolbox:addbutton(name)
  table.insert(self.arrbtn,name)
end

function toolbox:make()
  for k,v in ipairs(self.arrbtn) do
    g=k-1
    if self.selected == k then
      fill(0, 11, 255, 255)
    else
      fill(255, 0, 35, 255)
    end
    rect(g*self.width,0,self.width,50)
    fill(255, 221, 0, 255)
    textSize(20)
    text(v,g*self.width+self.width/2,25)
  end
  
end

function toolbox:touched(pos)
    for k,v in ipairs(self.arrbtn) do
    g=k-1
    local x= g*self.width
    if pos.x<x+self.width and pos.x>x then
      if pos.y<50 and pos.y>0 then
        self.selected = k
        sel = k
      end
    end
  end
  return sel

end

